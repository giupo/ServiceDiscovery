# -*- coding: utf-8 -*-

import json
import logging
import signal

import tornado.web
import tornado.ioloop
import tornado.httpserver

from config import config

log = logging.getLogger(__name__)


class ServiceHandler(tornado.web.RequestHandler):
    """Handles all discovery messages via REST API"""

    @classmethod
    def routes(cls):
        return [
            (r'/services/(.*)', cls),
            (r'/services/', cls),
            (r'/services', cls)
        ]

    def set_default_headers(self):
        # this is a JSON RESTful API
        self.set_header('Content-Type', 'application/json')

    def get(self, id=None):
        self.finish("HELLOOOO!!!")


# main routes registry
routes = []
routes.extend(ServiceHandler.routes())

settings = {
    "cookie_secret": config.get('ServiceDiscovery', 'secret'),
    "xsrf_cookies": False
}

application = tornado.web.Application(routes, **settings)
servicesService = None


def on_shutdown():
    """Shutdown callback"""
    global servicesService
    log.info("Shutdown started")
    if servicesService is not None:
        servicesService.unregister()

    log.info("Shutdown completed")


def startWebServer():
    server = tornado.httpserver.HTTPServer(application)
    protocol = config.get('ServiceDiscovery', 'protocol')
    addr = config.get('ServiceDiscovery', 'address')
    port = config.getint('ServiceDiscovery', 'port')
    service_name = config.get('ServiceDiscovery', 'servicename')
